int demo(alglib::real_1d_array x, alglib::real_1d_array y)
{
	//
	// In this example we demonstrate penalized spline fitting of noisy data
	//
	// We have:
	// * x - abscissas
	// * y - vector of experimental data, straight line with small noise
	//
	//real_1d_array x = "[0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90]";
	//real_1d_array y = "[0.10,0.00,0.30,0.40,0.30,0.40,0.62,0.68,0.75,0.95]";
	ae_int_t info;
	double v;
	spline1dinterpolant s;
	spline1dfitreport rep;
	double rho;

	//
	// Fit with VERY small amount of smoothing (rho = -5.0)
	// and large number of basis functions (M=50).
	//
	// With such small regularization penalized spline almost fully reproduces function values
	//

#ifdef ALGLIBNEW
	rho = 0.00001;
	spline1dfit(x, y, 50, rho, s, rep);
#else
	rho = -5.0;
	spline1dfitpenalized(x, y, 50, rho, info, s, rep);
#endif
	//printf("%d\n", int(info)); // EXPECTED: 1
	v = spline1dcalc(s, 0.0);
	printf("%.1f\n", double(v)); // EXPECTED: 0.10

								 //
								 // Fit with VERY large amount of smoothing (rho = 10.0)
								 // and large number of basis functions (M=50).
								 //
								 // With such regularization our spline should become close to the straight line fit.
								 // We will compare its value in x=1.0 with results obtained from such fit.
								 //

#ifdef ALGLIBNEW
	rho = 10000000000;
	spline1dfit(x, y, 50, rho, s, rep);
#else
	rho = +10.0;
	spline1dfitpenalized(x, y, 50, rho, info, s, rep);
#endif
	//printf("%d\n", int(info)); // EXPECTED: 1
	v = spline1dcalc(s, 1.0);
	printf("%.2f\n", double(v)); // EXPECTED: 0.969

								 //
								 // In real life applications you may need some moderate degree of fitting,
								 // so we try to fit once more with rho=3.0.
								 //

#ifdef ALGLIBNEW
	rho = 1000;
	spline1dfit(x, y, 50, rho, s, rep);
#else
	rho = +3.0;
	spline1dfitpenalized(x, y, 50, rho, info, s, rep);
#endif
	//printf("%d\n", int(info)); // EXPECTED: 1

	return 0;
}
int splineIT(alglib::real_1d_array x, alglib::real_1d_array y)
{

	double v;
	spline1dinterpolant s;
	spline1dfitreport rep;
	double rho;  // 3.12
	double lambdans;  // 3.17


	// http://www.alglib.net/translator/man/manual.cpp.html#sub_spline1dcalc

	std::string fn = "C:\\MyProjects\\spline.txt";
	std::ofstream of(fn, std::ofstream::out);

	for (int i = 0; i < x.length(); i++) {
		of << x[i] << ",";
	}
	of << std::endl;

#ifdef ALGLIBNEW
	lambdans = 1.0/1000000.0;  // the smaller this number the closer the fit
	spline1dfit(x, y, 400, lambdans,  s, rep);
#else
	rho = +0.0;
	spline1dfitpenalized(x, y, 400, rho, info, s, rep);
#endif 
	//printf("%d\n", int(info)); // EXPECTED: 1

	std::vector<double> graphy;
	for (int i = 0; i < x.length(); i++) {
		auto r = alglib::spline1dcalc(s, x[i]);
		graphy.push_back(r);
		of << r << ",";
	}
	of << std::endl;
#ifdef ALGLIBNEW
	lambdans = 1.0/10000.0;
	spline1dfit(x, y, 400, lambdans, s, rep);
#else
	rho = +2.0;
	spline1dfitpenalized(x, y, 400, rho, info, s, rep);
#endif
	//printf("%d\n", int(info)); // EXPECTED: 1

	graphy.clear();
	for (int i = 0; i < x.length(); i++) {
		auto r = alglib::spline1dcalc(s, x[i]);
		graphy.push_back(r);
		of << r << ",";
	}
	of << std::endl;
#ifdef ALGLIBNEW
	lambdans = 1.0/1000.0;  // the smaller this number the closer the fit 
	spline1dfit(x, y, 400, lambdans, s, rep);
#else
	rho = +6.0; // the smaller this number the closer the fit 
	spline1dfitpenalized(x, y, 400, rho, info, s, rep);
#endif
	//printf("%d\n", int(info)); // EXPECTED: 1

	graphy.clear();
	for (int i = 0; i < x.length(); i++) {
		auto r = alglib::spline1dcalc(s, x[i]);
		graphy.push_back(r);
		of << r << ",";
	}
	of << std::endl;
	return 0;
}
